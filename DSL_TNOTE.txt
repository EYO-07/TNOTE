// DSL Logic - TNOTE - Minimalist Translucent Notepad 
[ TNOTE - Minimalist Translucent Notepad ] {C++, windows API, Visual Studio} 
I := Includes for main.cpp 
F := Forward Declarations for main.cpp 
G := Global Variables Definitions for main.cpp 
M := wWinMain entry point function  
P := window Procedure of Main Window WindowProc 
E := Window Procedure of Edit Control EditProc 
1. /main.cpp || I | F | G | M ()? | P ()? | E ()? 
R := Register Main Window Class 
Cm := Create Main Window Handle 
Ce := Create Edit Control Handle 
-> M () || R | Cm | Ce | & message loop | Clean Up 
-> M () || R | Cm | Ce || Create a Multiline Edit Control as a Child of Main Window Handle | Set EditProc as the new window procedure for Edit Control and store the old edit control procedure in a variable 
2. P () || % WM_CREATE | % WM_SETFOCUS | % WM_COMMAND | % WM_SIZE | % WM_TIMER | % WM_ACTIVATE | % WM_CTLCOLOREDIT | % WM_DESTROY | % WM_PAINT | return the call for DefWindProc default window procedure 
-> P () || % WM_CREATE || AddMenu ()* 
-> P () || ... | % WM_SETFOCUS || Set focus for Edit Control 
-> P () || ... | % WM_COMMAND || % Load Menu Item Click || LoadFile()* 
-> P () || ... | % WM_COMMAND || % Load Menu Item Click | % Save Menu Item Click || SaveFile()* 
-> P () || ... | % WM_SIZE || Resize the Edit Control to Fit the Client Area 
-> P () || ... | % WM_TIMER || ?
-> P () || ... | % WM_ACTIVATE || % LOWORD(wParam) == WA_INACTIVE || Set Transparency to 100 (max 255)
-> P () || ... | % WM_ACTIVATE || % LOWORD(wParam) == WA_INACTIVE | % else || Set Transparency to 200 (max 255) 
-> P () || ... | % WM_CTLCOLOREDIT || Set Edit Control Text to Yellow | Set Edit Control Background to Black 
-> P () || ... | % WM_DESTROY || ? 
-> P () || ... | % WM_PAINT || ? 
3. E () || % WM_LBUTTONDBLCLK | % WM_SYSKEYDOWN | % WM_KEYDOWN | return the call of the old Edit Control Procedure 
-> E () || % WM_LBUTTONDBLCLK || % isCompactMode || full()* 
-> E () || % WM_LBUTTONDBLCLK || % isCompactMode | % else || compact()* 
-> E () || ... | % WM_SYSKEYDOWN || % alt key pressed | % ctrl + S pressed
-> ... | % ctrl + S pressed || UpdateCharLim()* | % currentFileName is not empty | % else || ?
-> ... | % ctrl + S pressed || UpdateCharLim()* | % currentFileName is not empty || ? 
-> ... | % ctrl + S pressed || UpdateCharLim()* | % currentFileName is not empty | % else | return 0 
-> E () || ... | % WM_SYSKEYDOWN || % alt key pressed || % VK_UP, VK_DOWN, VK_RIGHT, VK_LEFT || Move the Window 
-> E () || ... | % WM_KEYDOWN || % VK_F1 || Check for Commands on Edit Control Text ()* 
-> E () || ... | % WM_KEYDOWN || % VK_F1 | % VK_F5 || Latex Document Creation with Edit Control Text ()* || ? 
4. /functions.h || Includes | Function Declarations | Global Variables Declarations 
5. /functions.cpp || Includes | ... 
-> /functions.cpp || ... | CheckForCommands ()? || ? 
-> /functions.cpp || ... | LoadFile ()? || ? 
-> /functions.cpp || ... | SaveFile ()? || ? 
-> /functions.cpp || ... | AddMenu ()? || Create the Menu Bar for Main Window || Create Load Item | Create Save Item 
-> /functions.cpp || ... | compact ()? || Set to Borderless Window 
-> /functions.cpp || ... | full ()? || Set to Windowed Window | AddMenu()* 
-> /functions.cpp || ... | UpdateCharLim ()? || Update the Character Limit of Edit Control in order to fit all the text and expand the text 

// -- Append this to the A.I. prompt -- shift+enter to break line without sending the message 
This is a semiformal declarative language DSL, although there is symbols the names and descriptions must be interpreted and adapted to create a functional application. A sequence of expressions in DSL which describe the logic of a program or component is called DSL Logic. A DSL Logic has a starting line called head and a sequence of directives called logical paths. 
1. N. with N as a number, or ->, this is an annotation for the start of a logical path. 
2. [ Name or Application Description ], this part resumes the objetive of the DSL Logic.
3. { Context of Application }, this part along with the objective is called the head of DSL Logic.
4. X := Description, the operator := indicates that X is a shorter alias for a larger description. 
5. X ~ Y, means that X is an event or task and Y is a declarative expression of how the event should be processed. 
6. X || Y means that Y is inside the structure of X, is in his scope. 
7. X | Y means that X and Y stands in the same scope (structure) and Y is performed after X. 
8. & X, means that X is an repetition structure. 
9. & (type) X, is a refinement of the above directive, it indicates the type of element of iteration in parenthesis.
10. X (), denote that X is a function or a task. If it is an actual function depends of implementation. 
11. X ()!, denote that it's a function declaration.
12. X ()?, denote that it's a function definition.
13. X ()*, denote that it's a function call.
14. (type) = X (arg), is to specify the argument and returning type of the function with X name or description. 
15. % X, denote that X belongs to an conditional structure (if-elseif-else) or a switch structure.
16. $ X, denotes that X is a directive for construction of a variable. If it is a declaration or definition (initialization) is to be decided by the A.I.
17. $ (type) X, is a refinement of the previous directive, the parenthesis indicates the type informal or formal description and X indicates the variable name or description. 
18. $! X, indicates that this is just a declaration.
19. $? X, indicates that this is a definition.
20. $* X, indicates that this part modifies, or update the value of this variable. 
21. X {}, denotes that X is a class structure.
22. X {}!, denotes that X is a declaration of class X.
23. X {}?, denotes that X is a definition of class X.
24. X : Y {}, denotes that X is a class derived from Y.
25. ... , used to hide parts from the declarative statement which can be deduced from the previous statements. 
26. /filename, denotes a file or a module, /filename || X means that X should be on the appropriate file.
27. ?, means that should be completed by the A.I. 
28. A declaration can be assigned to multiple descriptions, for example: 'X,Y || Z' is the same as 'X || Z' followed by another logical path 'X | Y || Z' and Z should be smartly interpreted for X and for Y, they don't need to be the same.
29. The same concept is valid for '% X,Y || Z' which means '% X || Z' followed by '% X | % Y || Z' .
30. Logical Path { Context }, a context can be used in the end of a Logical Path. It's used to tell the A.I. to use specific library functions or to tell things that don't fit with DSL formalism. 
Explains step-by-step the creation of the application. Don't show the code for now, just tell me how to configure the project and create the suggested files. Wait for further instructions. 


